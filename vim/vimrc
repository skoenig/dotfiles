" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" automatic reloading of .vimrc
autocmd! bufwritepost .vimrc source %

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/bundle')

" Colorschemes
Plug 'joedicastro/vim-molokai256'
Plug 'chriskempson/vim-tomorrow-theme'
Plug 'chriskempson/base16-vim'
Plug 'NLKNguyen/papercolor-theme'
Plug 'junegunn/seoul256.vim'
Plug 'jnurmine/zenburn'
Plug 'jonathanfilip/vim-lucius'
Plug 'dfrnswrth/vim-codeburn'

" Everything else...
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'bling/vim-airline'
Plug 'fatih/vim-go'
Plug 'freitass/todo.txt-vim'
Plug 'j5shi/searchcomplete'
Plug 'junegunn/limelight.vim'
Plug 'kien/ctrlp.vim'
Plug 'mileszs/ack.vim'
Plug 'msanders/snipmate.vim'
Plug 'robertkrimen/vim-gnupg'
Plug 'scrooloose/syntastic'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-eunuch'
Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }
Plug 'rodjek/vim-puppet'
Plug 'vim-scripts/buftabs'
Plug 'godlygeek/tabular'
Plug 'vimwiki/vimwiki'

filetype plugin indent on " required!
call plug#end()

" remove trailing whitespaces
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun

if has('autocmd')
    filetype plugin indent on
    autocmd BufWritePre *.* :call <SID>StripTrailingWhitespaces()
endif

" Enable syntax highlighting
if has('syntax') && !exists('g:syntax_on')
  syntax enable
endif

" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
  nnoremap <silent> <C-L> :nohlsearch<CR><C-L>
endif

if !&scrolloff
  set scrolloff=1
endif
if !&sidescrolloff
  set sidescrolloff=5
endif
set display+=lastline

if &listchars ==# 'eol:$'
  set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
  if &termencoding ==# 'utf-8' || &encoding ==# 'utf-8'
    let &listchars = "tab:\u21e5 ,trail:\u2423,extends:\u21c9,precedes:\u21c7,nbsp:\u26ad"
  endif
endif

if &history < 1000
  set history=1000
endif
set viminfo^=!

if !exists('g:netrw_list_hide')
  let g:netrw_list_hide = '^\.,\~$,^tags$'
endif

" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif


" Make Y consistent with C and D.  See :help Y.
nnoremap Y y$

set t_Co=256
set background=dark
colorscheme lucius

" set guifont
if has("gui_running")
  if has("gui_gtk2")
    set guifont=Monospace\ 8
  elseif has("gui_photon")
    set guifont=Monospace:s8
  elseif has("gui_kde")
    set guifont=Monospace/8/-1/5/50/0/0/0/1/0
  elseif has("x11")
    set guifont=-*-monospace-medium-r-normal-*-*-180-*-*-m-*-*
  else
    set guifont=Monospace:h8:cDEFAULT
  endif
endif

filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins

let mapleader = ","   " use easy to type localleader instead of '\'
set encoding=utf-8    " set encoding to unicode
set wrap              " show long lines wrapped
set hlsearch          " highlight matched search patterns
set ignorecase        " No case in searches (has to be set for option 'smartcase')
set smartcase         " No case in searches, unless the query contains upper case characters
set hidden            " Let us move between buffers without writing them. Don't :q! or :qa! frivolously!
set number            " show line numbers
set cursorline        " highlight current line
set ruler             " show the cursor position all the time
set showcmd           " display incomplete commands
set showmode          " show Insert, Replace or Visual mode in the last line
set ttyfast           " fast scrolling
set writebackup       " make a backup before changing a file
set backup            " keep backup files
set shiftwidth=4      " amout of spaces < and > uses
set softtabstop=4
set tabstop=4         " spaces to set tabwidth to
set expandtab         " convert tabs to spaces
set foldmethod=marker " automatically fold by marker {{{ }}}
set foldenable        " all folds closed by default
set foldclose=all     " automatically close fold when not in it
set textwidth=0       " textwidth used by used for wrapping
set formatoptions+=t  " automatic wrapping
set autoindent
set backspace=indent,eol,start
set complete-=i
set showmatch
set smarttab
set autoread
set autowrite
set fileformats+=mac
set nrformats-=octal
set shiftround
set ttimeout
set ttimeoutlen=50
set incsearch
set laststatus=2
set wildmenu
set nowrap
set langmenu=en
set helplang=en
set relativenumber
set novisualbell
set colorcolumn=80
set scrolloff=10
set sidescrolloff=10

" toggle copy & paste mode
set pastetoggle=<F2>

" toggle line numbers
nnoremap <F3> :set nonumber!<CR>

" toggle cursorline highlighting
nnoremap <F4> :set nocursorline!<CR>

" toggle listing whitespace characters
nnoremap <F5> :set list!<CR>

" toggle line wrapping
nnoremap <F6> :set wrap!<CR>

" Switch buffers
map <C-Right> :bnext<CR>
map <C-Left>  :bprev<CR>

" Shift lines up and down in (n)ormal, (i)nsert and (v)isual modi
nnoremap <C-j> mz:m+<CR>`z
nnoremap <C-k> mz:m-2<CR>`z
"inoremap <C-j> <Esc>:m+<CR>gi
"inoremap <C-k> <Esc>:m-2<CR>gi
vnoremap <C-j> :m'>+<CR>gv=`<my`>mzgv`yo`z
vnoremap <C-k> :m'<-2<CR>gv=`>my`<mzgv`yo`z

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
               \ | wincmd p | diffthis
endif

" color tweaks
hi User1 term=inverse,bold cterm=bold ctermbg=darkgreen ctermfg=white
hi User2 term=inverse,bold cterm=bold ctermbg=darkmagenta ctermfg=white
hi User3 term=inverse,bold cterm=bold ctermbg=cyan ctermfg=white
hi User4 term=inverse,bold cterm=bold ctermbg=grey ctermfg=white
hi User5 term=inverse,bold cterm=bold ctermbg=red ctermfg=white
hi User6 term=inverse,bold cterm=bold ctermbg=darkyellow ctermfg=white
hi User7 term=inverse,bold cterm=bold ctermbg=blue ctermfg=white

" statusline tweaks
set statusline=
set statusline +=%2*\ %{&ff}\ %*        "file format
set statusline +=%6*\ %y\ %*            "file type
set statusline +=%5*\ %<%F\ %*          "full path
set statusline +=\ %m\                  "modified flag
set statusline +=%5*%r%*                "read only flag
set statusline +=%=                     "space
"set statusline +=%7*%=\ pos:%12o\ %*    "current byte position
set statusline +=%7*\ lines:%5l%*       "current line
set statusline +=%7*/%L\ %*             "total lines
set statusline +=%2*\ cols:%4c\ %*      "column number
set statusline +=%1*%7P\ %*             "percentage through file
set statusline+=%#warningmsg#
" set statusline+=\ %{SyntasticStatuslineFlag()}\     " error counts
set statusline+=%*

" NERDTree
map <leader>n :NERDTreeToggle<CR>

" ACK
map <leader>a :Ack

" ctrl-p
let g:ctrlp_map = '<leader>p'
let g:ctrlp_working_path_mode = 0
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*~"
let g:ctrlp_custom_ignore = {
    \ 'dir': '\.git$\|\.hg$\|\.svn$\|node_modules',
    \ 'file': '\.pyc$\|\.pyo$\|\.rbc$|\.rbo$\|\.class$\|\.o$\|\~$\|\.DS_Store',
    \ 'link': 'some_bad_symbolic_links',
    \ }

" jedi
let g:jedi#use_tabs_not_buffers = 0
let g:jedi#usages_command = '' " <leader>n already used by NERDTree

" syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }
let g:syntastic_python_checkers = ['flake8']

" markdown
let g:vim_markdown_folding_disabled = 0
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_conceal = 0

" vimwiki
let g:vimwiki_list = [{'path': '~/wiki/', 'syntax': 'markdown', 'ext': '.md', 'diary_rel_path': 'date/', 'diary_index': 'index'}]
let g:vimwiki_folding = 'expr'
let g:vimwiki_global_ext = 0
nmap <Leader>wcr <Plug>VimwikiDiaryGenerateLinks

" Function to insert a header in the vimwiki style
 function! InsertWikiHeader()
    let date = strftime('%A, %d. %B %Y', localtime())
    let title = substitute(join(split(expand("%:t:r"),"-")), "\\<.",  "\\u&", "g")
    let underline = substitute(title, ".", "=", "g")
    exec "normal! I".title
    put=underline
    put='*created ' . date . ' - updated ' . date . '*'
    exec "normal! o\<CR>"
 endfunction

" Abbreviation, wich calls the above function
iab wikihead <ESC>:call InsertWikiHeader()<CR>
nmap <leader>wh :call InsertWikiHeader()<CR>

" If buffer modified, update any 'updated' in the first 3 lines.
" Restores cursor and window position using save_cursor variable.
function! LastModified()
  if &modified
    let save_cursor = getpos(".")
    let n = min([3, line("$")])
    keepjumps exe '1,' . n . 's#^\(.*updated\)[^*]*#\1 ' .
          \ strftime('%A, %d. %B %Y', localtime()) . '#e'
    call histdel('search', -1)
    call setpos('.', save_cursor)
  endif
endfun
autocmd BufWritePre * call LastModified()

" python snippets
function! InsertPythonHeader()
    exec "normal! ggO#!/usr/bin/env python\<CR># -*- coding: utf-8 -*-\<CR>"
endfunction
iab pyhead <ESC>:call InsertPythonHeader()<CR>

function! InsertPythonTemplate()
    exec "normal! ggO"
    r ~/workspace/scripts/python/python_template.py
endfunction
iab pytemplate <ESC>:call InsertPythonTemplate()<CR>

" filetype detection
au BufNewFile,BufRead *.markdown,*.mdown,*.mkd,*.mkdn,*.md set ft=markdown wrap
au BufNewFile,BufRead *.jinja set ft=jinja
au BufNewFile,BufRead todo.txt,done.txt set filetype=todo
au BufNewFile,BufRead *pp set filetype=puppet

" airline
let g:airline_powerline_fonts = 1

"--- .../plugins/named.vim ----
function! UPDSERIAL(date, num)
if (strftime("%Y%m%d") == a:date)
return a:date . a:num+1
endif
return strftime("%Y%m%d") . '01'
endfunction

command! Soa :%s/\(2[0-9]\{7}\)\([0-9]\{2}\)\(\s*;\s*Serial\)/\=UPDSERIAL(submatch(1), submatch(2)) . submatch(3)/gci
"---- eof ---------------------
