" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" automatic reloading of .vimrc
autocmd! bufwritepost .vimrc source %

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/bundle')

" Colorschemes
Plug 'joedicastro/vim-molokai256'
Plug 'chriskempson/vim-tomorrow-theme'
Plug 'chriskempson/base16-vim'
Plug 'NLKNguyen/papercolor-theme'
Plug 'jonathanfilip/vim-lucius'
Plug 'jnurmine/zenburn'
Plug 'morhetz/gruvbox'
Plug 'mhartington/oceanic-next'
Plug 'drewtempelmeyer/palenight.vim'

" Everything else...
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'vim-airline/vim-airline'
Plug 'junegunn/limelight.vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'jremmen/vim-ripgrep'
Plug 'jamessan/vim-gnupg'
Plug 'dense-analysis/ale'
Plug 'psf/black', { 'branch': 'stable' }    " Python autoformat
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-eunuch'
Plug 'preservim/vim-markdown'
Plug 'vim-scripts/buftabs'
Plug 'godlygeek/tabular'
Plug 'vimwiki/vimwiki'
Plug 'editorconfig/editorconfig-vim'
Plug 'hashivim/vim-terraform'

filetype plugin indent on " required!
call plug#end()

" remove trailing whitespaces
autocmd BufWritePre * %s/\s\+$//e

" remove trailing empty lines
function TrimEndLines()
    let save_cursor = getpos(".")
    silent! %s#\($\n\s*\)\+\%$##
    call setpos('.', save_cursor)
endfunction
autocmd BufWritePre * call TrimEndLines()

" Enable syntax highlighting
if has('syntax') && !exists('g:syntax_on')
  syntax enable
endif

" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
  nnoremap <silent> <C-L> :nohlsearch<CR><C-L>
endif

if !&scrolloff
  set scrolloff=1
endif
if !&sidescrolloff
  set sidescrolloff=5
endif
set display+=lastline

if &listchars ==# 'eol:$'
  set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
  if &termencoding ==# 'utf-8' || &encoding ==# 'utf-8'
    let &listchars = "tab:\u21e5 ,trail:\u2423,extends:\u21c9,precedes:\u21c7,nbsp:\u26ad"
  endif
endif

if &history < 1000
  set history=1000
endif
set viminfo^=!

if !exists('g:netrw_list_hide')
  let g:netrw_list_hide = '^\.,\~$,^tags$'
endif

nnoremap Y "+y
vnoremap Y "+y
nnoremap YY ggVG"+y

if exists('+termguicolors')
  set termguicolors
else
  set t_Co=256
endif

" Switch colorscheme depending on the time of the day.
let hour = strftime("%H")
if 8 <= hour && hour <= 20
  set background=light
  let g:gruvbox_contrast_light='hard'
  colorscheme gruvbox

else
  set background=dark
  colorscheme gruvbox

endif

" set guifont
if has("gui_running")
  if has("gui_gtk2")
    set guifont=Monospace\ 8
  elseif has("gui_photon")
    set guifont=Monospace:s8
  elseif has("gui_kde")
    set guifont=Monospace/8/-1/5/50/0/0/0/1/0
  elseif has("x11")
    set guifont=-*-monospace-medium-r-normal-*-*-180-*-*-m-*-*
  else
    set guifont=Monospace:h8:cDEFAULT
  endif
endif

filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins

let mapleader = ","   " use easy to type localleader instead of '\'
set encoding=utf-8    " set encoding to unicode
set wrap              " show long lines wrapped
set hlsearch          " highlight matched search patterns
set ignorecase        " No case in searches (has to be set for option 'smartcase')
set smartcase         " No case in searches, unless the query contains upper case characters
set hidden            " Let us move between buffers without writing them. Don't :q! or :qa! frivolously!
set number            " show line numbers
set cursorline        " highlight current line
set ruler             " show the cursor position all the time
set showcmd           " display incomplete commands
set showmode          " show Insert, Replace or Visual mode in the last line
set ttyfast           " fast scrolling
set shiftwidth=4      " amout of spaces < and > uses
set softtabstop=4
set tabstop=4         " spaces to set tabwidth to
set expandtab         " convert tabs to spaces
set foldlevelstart=1
set textwidth=0       " textwidth used by used for wrapping
set formatoptions+=t  " automatic wrapping
set autoindent
set backspace=indent,eol,start
set complete-=i
set showmatch
set smarttab
set autoread
set autowrite
set fileformats+=mac
set nrformats-=octal
set shiftround
set ttimeout
set ttimeoutlen=50
set incsearch
set laststatus=2
set wildmenu
set langmenu=en
set helplang=en
set relativenumber
set novisualbell
set colorcolumn=80
set scrolloff=10
set sidescrolloff=10
set backup            " keep backup files
set backupdir=~/.cache//
set directory=~/.cache//
set undodir=~/.cache//
set diffopt+=iwhite

" toggle copy & paste mode
set pastetoggle=<F2>

" toggle line numbers
nnoremap <F3> :set nonumber! \| set norelativenumber!<CR>

" toggle cursorline highlighting
nnoremap <F4> :set nocursorline!<CR>

" toggle listing whitespace characters
nnoremap <F5> :set list!<CR>

" toggle line wrapping
nnoremap <F6> :set wrap!<CR>

" Switch buffers
map <leader><Right> :bnext<CR>
map <leader><Left>  :bprev<CR>

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
               \ | wincmd p | diffthis
endif

" color tweaks
hi User1 term=inverse,bold cterm=bold ctermbg=darkgreen ctermfg=white
hi User2 term=inverse,bold cterm=bold ctermbg=darkmagenta ctermfg=white
hi User3 term=inverse,bold cterm=bold ctermbg=cyan ctermfg=white
hi User4 term=inverse,bold cterm=bold ctermbg=grey ctermfg=white
hi User5 term=inverse,bold cterm=bold ctermbg=red ctermfg=white
hi User6 term=inverse,bold cterm=bold ctermbg=darkyellow ctermfg=white
hi User7 term=inverse,bold cterm=bold ctermbg=blue ctermfg=white

" statusline tweaks
set statusline=
set statusline +=%2*\ %{&ff}\ %*        "file format
set statusline +=%6*\ %y\ %*            "file type
set statusline +=%5*\ %<%F\ %*          "full path
set statusline +=\ %m\                  "modified flag
set statusline +=%5*%r%*                "read only flag
set statusline +=%=                     "space
"set statusline +=%7*%=\ pos:%12o\ %*    "current byte position
set statusline +=%7*\ lines:%5l%*       "current line
set statusline +=%7*/%L\ %*             "total lines
set statusline +=%2*\ cols:%4c\ %*      "column number
set statusline +=%1*%7P\ %*             "percentage through file
set statusline+=%#warningmsg#
set statusline+=%*

" NERDTree
map <leader>n :NERDTreeToggle<CR>

" Ripgrep
map <leader>r :Rg<Space>

" ctrl-p
let g:ctrlp_map = '<leader>p'
let g:ctrlp_working_path_mode = 0
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*~"
let g:ctrlp_custom_ignore = {
    \ 'dir': '\.git$\|\.hg$\|\.svn$\|node_modules',
    \ 'file': '\.pyc$\|\.pyo$\|\.rbc$|\.rbo$\|\.class$\|\.o$\|\~$\|\.DS_Store',
    \ }

" configure black and run on file close.
let g:black_skip_string_normalization = 1
autocmd BufWritePre *.py execute ':Black'

" terraform
let g:terraform_align=1
let g:terraform_fmt_on_save=1

" markdown
let g:vim_markdown_folding_style_pythonic = 1
let g:vim_markdown_folding_disabled = 0
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_conceal = 0

" vimwiki
let g:vimwiki_list = [{ 'path': '~/Sync/wiki/',
                        \'syntax': 'markdown',
                        \'ext': '.md',
                        \'diary_rel_path': 'journal/',
                        \'diary_index': 'index'
                        \}]
let g:vimwiki_use_calendar = 1
let g:vimwiki_folding = 'expr'
let g:vimwiki_global_ext = 0
let g:vimwiki_hl_cb_checked = 2
let g:vimwiki_markdown_link_ext = 1
let g:vimwiki_dir_link = 'index'
let g:vimwiki_auto_header = 1
let g:vimwiki_listsyms = ' .oOx'
nmap <Leader>tt :e ~/Sync/wiki/todo/todo.md<CR>
nmap <Leader><Up> <Plug>VimwikiDiaryPrevDay
nmap <Leader><Down> <Plug>VimwikiDiaryNextDay

" Function to insert a h1 header derived from filename and a timestamp
 function! InsertWikiHeader()
    let date = strftime('%A, %d. %B %Y', localtime())
    let title = substitute(join(split(expand("%:t:r"),"-")), "\\<.",  "\\u&", "g")
    exec "normal! I# " . title
    put=''
    put='> created ' . date . ' - updated ' . date
    exec "normal! o\<CR>"
 endfunction

" Convenient abbreviations and mappings for wikiheader
iab wikihead <ESC>:call InsertWikiHeader()<CR>
nmap <leader>iw :call InsertWikiHeader()<CR>

" If buffer modified, update string after ' - updated' in the first 3 lines.
" Restores cursor and window position using save_cursor variable.
function! LastModified()
  if &modified
    let save_cursor = getpos(".")
    let n = min([3, line("$")])
    keepjumps exe '2,' . n . 's#^\(.* - updated\)[^*]*#\1 ' .
          \ strftime('%A, %d. %B %Y', localtime()) . '#e'
    call histdel('search', -1)
    call setpos('.', save_cursor)
  endif
endfun
autocmd BufWritePre *.{md,mdx,mdown,mkd,mkdn,markdown,mdwn} call LastModified()

" filetype detection
autocmd BufNewFile,BufRead *.yml,*.yaml setlocal filetype=yaml ts=2 sw=2 sts=2 et
autocmd BufNewFile,BufRead *.{md,mdx,mdown,mkd,mkdn,markdown,mdwn} setlocal filetype=markdown syntax=markdown wrap
autocmd BufNewFile,BufRead Makefile,*.mk setlocal noexpandtab

" save folding levels
augroup remember_folds
  autocmd!
  autocmd BufWinLeave * mkview
  autocmd BufWinEnter * silent! loadview
augroup END

" airline
let g:airline_powerline_fonts = 1

function! TitleCase()
    exec '%s/\<./\u&/g'
endfunction
nmap <leader>tc :call TitleCase()<CR>
