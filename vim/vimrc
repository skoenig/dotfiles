" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

call pathogen#infect()

" automatic reloading of .vimrc
autocmd! bufwritepost .vimrc source %

" set color scheme
colorscheme lucius

set t_Co=256
" Allow color schemes to do bright colors without forcing bold.
if &t_Co == 8 && $TERM !~# '^linux'
  set t_Co=16
endif

" set guifont
if has("gui_running")
  if has("gui_gtk2")
    set guifont=Monospace\ 8
  elseif has("gui_photon")
    set guifont=Monospace:s8
  elseif has("gui_kde")
    set guifont=Monospace/8/-1/5/50/0/0/0/1/0
  elseif has("x11")
    set guifont=-*-monospace-medium-r-normal-*-*-180-*-*-m-*-*
  else
    set guifont=Monospace:h8:cDEFAULT
  endif
endif

syntax on             " Enable syntax highlighting
filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins

let mapleader = ","   " use easy to type localleader instead of '\'
set mouse=vn          " enable mouse only in (v)isual and (n)ormal modes
set encoding=utf-8    " set encoding to unicode
set nowrap            " don't show long lines wrapped
set hlsearch          " highlight matched search patterns
set ignorecase        " No case in searches (has to be set for option 'smartcase')
set smartcase         " No case in searches, unless the query contains upper case characters
set hidden            " Let us move between buffers without writing them. Don't :q! or :qa! frivolously!
set number            " show line numbers
set cursorline        " highlight current line
set showmode          " show Insert, Replace or Visual mode in the last line
set ttyfast           " fast scrolling
set writebackup       " make a backup before changing a file
set backup            " keep backup files
set tabstop=4         " spaces to set tabwidth to
"set softtabstop=4     " spaces Vim sees as a tab
set shiftwidth=4      " amout of spaces < and > uses
set expandtab         " convert tabs to spaces
set foldmethod=marker   " automatically fold by marker {{{ }}}
set foldenable          " all folds closed by default
set textwidth=120       " textwidth used by used for wrapping
set formatoptions+=t    " automatic wrapping
set pastetoggle=<F2>    " copy & paste
execute "set colorcolumn=" . join(range(121,335), ',')

" Switch buffers
map <C-Right> :bnext<CR>
map <C-Left>  :bprev<CR>

" Shift lines up and down in (n)ormal, (i)nsert and (v)isual modi
nnoremap <C-j> mz:m+<CR>`z
nnoremap <C-k> mz:m-2<CR>`z
inoremap <C-j> <Esc>:m+<CR>gi
inoremap <C-k> <Esc>:m-2<CR>gi
vnoremap <C-j> :m'>+<CR>gv=`<my`>mzgv`yo`z
vnoremap <C-k> :m'<-2<CR>gv=`>my`<mzgv`yo`z

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
               \ | wincmd p | diffthis
endif

" NERDTree
map <unique> <leader>n :NERDTreeToggle<CR>

" ACK
map <unique> <leader>a <Esc>:Ack!

" ctrl-p
let g:ctrlp_map = '<leader>t'
let g:ctrlp_working_path_mode = 0
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*~"
let g:ctrlp_custom_ignore = {
    \ 'dir': '\.git$\|\.hg$\|\.svn$\|node_modules',
    \ 'file': '\.pyc$\|\.pyo$\|\.rbc$|\.rbo$\|\.class$\|\.o$\|\~$\|\.DS_Store',
    \ 'link': 'some_bad_symbolic_links',
    \ }

" jedi
let g:jedi#use_tabs_not_buffers = 0
let g:jedi#usages_command = '' " <leader>n already used by NERDTree

" settings for vimwiki
let g:vimwiki_folding = 1
let g:vimwiki_fold_lists = 1
let g:vimwiki_camel_case = 0
let g:vimwiki_list = [{'path': '~/wiki/',                         'path_html': '~/wiki/export/',                         'diary_rel_path': 'date/',  'diary_index': 'Date', 'diary_header': 'Index', 'maxhi': 0, 'syntax': 'markdown', 'ext': '.md'},
                    \ {'path': '~/workspace/sysop-private/zwiki', 'path_html': '~/workspace/sysop-private/zwiki/export', 'diary_rel_path': 'date/',  'diary_index': 'Date', 'diary_header': 'Index', 'maxhi': 0, 'syntax': 'markdown', 'ext': '.md'}]

:hi VimwikiHeader1 guifg=#D700AF gui=bold ctermfg=163   term=bold cterm=bold
:hi VimwikiHeader2 guifg=#8700FF gui=bold ctermfg=93    term=bold cterm=bold
:hi VimwikiHeader3 guifg=#5F87FF gui=bold ctermfg=69    term=bold cterm=bold
:hi VimwikiHeader4 guifg=#87AFFF gui=bold ctermfg=111   term=bold cterm=bold
:hi VimwikiHeader5 guifg=#87AFFF gui=bold ctermfg=111   term=bold cterm=bold
:hi VimwikiHeader6 guifg=#87AFFF gui=bold ctermfg=111   term=bold cterm=bold

" markdown
let g:vim_markdown_folding_disabled=1

" Function to insert a header in the vimwiki style
 function! InsertWikiHeader()
    let date = strftime('%A, %d. %B %Y', localtime())
    let title = substitute(join(split(expand("%:t:r"),"-")), "\\<.",  "\\u&", "g")
    let underline = substitute(title, ".", "=", "g")
    exec "normal! I".title
    put=underline
    put='*created ' . date . ' - updated ' . date . '*'
    exec "normal! o\<CR>"
 endfunction

" Abbreviation, wich calls the above function
iab vimwiki <ESC>:call InsertWikiHeader()<CR>

" If buffer modified, update any 'updated' in the first 3 lines.
" Restores cursor and window position using save_cursor variable.
function! LastModified()
  if &modified
    let save_cursor = getpos(".")
    let n = min([3, line("$")])
    keepjumps exe '1,' . n . 's#^\(.*updated\)[^*]*#\1 ' .
          \ strftime('%A, %d. %B %Y', localtime()) . '#e'
    call histdel('search', -1)
    call setpos('.', save_cursor)
  endif
endfun
autocmd BufWritePre * call LastModified()

" python snippets
function! InsertPythonHeader()
    exec "normal! ggO#!/usr/bin/env python\<CR># -*- coding: utf-8 -*-\<CR>"
endfunction
iab pyhead <ESC>:call InsertPythonHeader()<CR>

function! InsertPythonTemplate()
    exec "normal! ggO"
    r ~/workspace/scripts/python/python_template.py
endfunction
iab pytemplate <ESC>:call InsertPythonTemplate()<CR>

" filetype detection
au BufNewFile,BufRead *.markdown,*.mdown,*.mkd,*.mkdn,*.md set ft=markdown
au BufNewFile,BufRead *.jinja set ft=jinja
au BufNewFile,BufRead todo.txt,done.txt set filetype=todo
au BufNewFile,BufRead *pp set filetype=puppet


